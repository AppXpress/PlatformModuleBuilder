#!bin/bash

function showOptions ( )
{
	echo ""
	echo "usage: bash pmextractor [options]"
	echo ""
	echo "	-exportFolder		set default repository to clone from"
	echo "	-gitFolder		set default source folder to be zipped"
	echo "  	-customer		set customer path for exported zip"
	echo "  	-platformFolder		set custom object path for exported zip"
	echo "		-clear				clear property file" 
	echo "	-h			help "
	echo "	-f			over write fef"
	echo "  	-s			over write scripts"
	echo "  	-o         		over write fef and scripts"
	echo "  	-i          		do not over write fef or scripts"
	echo "  	-c          		set customer"
	echo "  	-g          		set git folder"
	echo "  	-z          		set exported zip folder"
	echo "  	-p          		set platform folder"
}
#######################################################
function rewritePropertyFile ( )
{
	sed -i "s/p_export=[^ ]*/p_export=$export/g" $propFile
	sed -i "s/p_folder=[^ ]*/p_folder=$folder/g" $propFile
	sed -i "s/p_pm=[^ ]*/p_pm=$platformFolder/g" $propFile
	sed -i "s/p_customer=[^ ]*/p_customer=$customer/g" $propFile
}
#######################################################
###############Set Property File#######################
#######################################################
propDir=~/.platformtools
if [ ! -d "$propDir" ] ; then
	mkdir "$propDir"
fi

propFile=~/.platformtools/extractor.properties
if [ ! -f "$propFile" ] ; then
    touch "$propFile"
	echo "p_export=" >> $propFile
	echo "p_pm=" >> $propFile
	echo "p_folder=" >> $propFile
	echo "p_customer=">> $propFile
fi
#######################################################
###############Set properties##########################
#######################################################
if [ -f "$propFile" ] ; then
	. "$propFile"
fi
export="$p_export"
folder="$p_folder"
platformFolder="$p_pm"
customer="$p_customer"

if [[ $1 == "-help" ]] ; then
	showOptions
	exit 0
fi
#######################################################
################Check for set Options##################
#######################################################
	#Set repo variable third arg
	#program will use this as a default to clone from
	if [ "$1" == "-exportFolder" ] ; then
		if [[ -n $2 ]] ; then
			export=$2
			rewritePropertyFile
			echo "Set export folder name"
		else
			echo "Need to add name of repository"
		fi
		exit 0
	fi
	#Set folder name variable third arg
	#program will use this as a default folder to create a zip
	if [ "$1" == "-gitFolder" ] ; then
		if [[ -n $2 ]] ; then
			folder=$2
			rewritePropertyFile
			echo "Set source folder property"
		else
			echo "Need to add name of folder"
		fi
		exit 0
	fi
	if [ "$1" == "-customer" ] ; then
		if [[ -n $2 ]] ; then
			customer=$2
			rewritePropertyFile
			echo "Set customer path"
		else
			echo "Need to add name of branch in repository"
		fi
		exit 0
	fi
	if [ "$1" == "-platformFolder" ] ; then
		if [[ -n $2 ]] ; then
			platformFolder=$2
			rewritePropertyFile
			echo "Set custom object path"
		else
			echo "Need to add name of branch in repository"
		fi
		exit 0
	fi
	if [ "$1" == "-clear" ] ; then
		rm "$propFile"
		echo "Property file cleared"
		exit 0
	fi
#####################################################
fef=""
scripts=""
OPTIND=1
while getopts "h?f?s?o?i?c:g:z:p:" opt; do
    case "$opt" in
    h|\?)
        showOptions
        exit 0
        ;;
    f)  fef="y"
        ;;
    s)  scripts="y"
        ;;
	o)  scripts="y"
		fef="y"
		;;
	i)	scripts="n"
		fef="n"
		;;
	c) customer="$OPTARG"
	;;
	g) folder="$OPTARG"
	;;
	z) export="$OPTARG"
	;;
	p) platformFolder="$OPTARG"
	;;
    esac
done
###################################################

if [ -z "$export" ] ; then
	read -p "Enter exported folder name: " export
fi
	
if [ -z "$folder" ] ; then
	read -p "Enter GIT staging folder name: " folder
fi

if [ -z "$customer" ] ; then
	read -p "Enter Customer : " customer
fi

if [ -z "$platformFolder" ] ; then
	read -p "Enter Platform Module : " platformFolder
fi

shift $((OPTIND-1))

[ "$1" = "--" ] && shift
#####################################################

##OPTIONS##
if [ -z "$fef" ] ; then
	read -p "OverWrite Fef ( Y or N ) -> " fef
fi
if [ -z "$scripts" ] ; then
	read -p "OverWrite Scripts ( Y or N )-> " scripts 
fi

if [ -d "PlatModx" ] ; then
	rm -rf PlatModx
fi

echo "Exported module : $export"
echo "Local Directory : $folder"
echo "Customer folder : $customer"
echo "PlatformModule folder : $platformFolder"


java -jar pmExtractorUtil.jar $export $folder $customer $platformFolder $scripts $fef