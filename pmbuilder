#!bin/bash

function showOptions ( )
{
	echo ""
	echo "usage: bash pmbuilder [options]"
	echo ""
	echo "	-repository		set default repository to clone from"
	echo "	-pm				set default Platform Module Folder"
	echo "	-branch			set default branch in repository to clone from"
	echo "	-clear 			clear property file of defaults"
	echo "	-customer		set customer file path of desired platform module"
	echo "	-h				show options"
	echo "	-c 				set customer"
	echo "	-b 				set branch"
	echo "	-f				set platform module folder"
}
#######################################################
function rewritePropertyFile ( )
{
	sed -i "s/p_repository=[^ ]*/p_repository=$repo/g" $propFile
	sed -i "s/p_folder=[^ ]*/p_folder=$folder/g" $propFile
	sed -i "s/p_branch=[^ ]*/p_branch=$branch/g" $propFile
	sed -i "s/p_customer=[^ ]*/p_customer=$customer/g" $propFile
	
}
#######################################################
###############Set Property File#######################
#######################################################
propDir=~/.platformtools
if [ ! -d "$propDir" ] ; then
	mkdir "$propDir"
fi

propFile=~/.platformtools/builder.properties
if [ ! -f "$propFile" ] ; then
    touch "$propFile"
	echo "p_repository=" >> $propFile
	echo "p_folder=" >> $propFile
	echo "p_branch=" >> $propFile
	echo "p_customer=">> $propFile
fi
#######################################################
###############Set properties##########################
#######################################################
if [ -f "$propFile" ] ; then
	. "$propFile"
fi

repo="$p_repository"
folder="$p_folder"
branch="$p_branch"
customer="$p_customer"

#######################################################
################Check for set Options##################
#######################################################
	#Set repo variable third arg
	#program will use this as a default to clone from
	if [ "$1" == "-repository" ] ; then
		if [[ -n $2 ]] ; then
			repo=$2
			rewritePropertyFile
			echo "Set repository property"
		else
			echo "Need to add name of repository"
		fi
		exit 0
	fi
	#Set folder name variable third arg
	#program will use this as a default folder to create a zip
	if [ "$1" == "-pm" ] ; then
		if [[ -n $2 ]] ; then
			folder=$2
			rewritePropertyFile
			echo "Set source folder property"
		else
			echo "Need to add name of folder"
		fi
		exit 0
	fi
	#Set default branch of repository to clone from
	if [ "$1" == "-branch" ] ; then
		if [[ -n $2 ]] ; then
			branch=$2
			rewritePropertyFile
			echo "Set repository branch property"
		else
			echo "Need to add name of branch in repository"
		fi
		exit 0
	fi
	#Set customer path of platform module folder
	if [ "$1" == "-customer" ] ; then
		if [[ -n $2 ]] ; then
			customer=$2
			rewritePropertyFile
			echo "Set customer path"
		else
			echo "Need to add name of branch in repository"
		fi
		exit 0
	fi

if [[ $1 == "-help" ]] ; then
	showOptions
	exit 0
elif [[ $1 == "-clear" ]] ; then
	rm marvin_data.properties
	echo "Property file cleared"
	exit 0
fi
##############################################
#########Set options##########################
##############################################
OPTIND=1
while getopts "h?c:f:b:" opt; do
    case "$opt" in
    h|\?)
        showOptions
        exit 0
        ;;
	c) customer="$OPTARG"
	;;
	f) folder="$OPTARG"
	;;
	b) branch="$OPTARG"
	;;
    esac
done

echo "Repository : $repo "
echo "Source Folder : $folder "
echo "Branch :	$branch"
echo "Customer : $customer"
###################################################
if [ ! -d .git ] ; then
	git init
fi 

if [ -z "$repo" ] ; then
	read -p "Enter repository url: " repo 
fi
	
if [ -z "$branch" ] ; then
	read -p "Enter branch of repository: " branch
fi

git remote remove stash 2>/dev/null
git remote add stash $repo
git pull stash "$branch"

if cd lib 2>/dev/null; then
	cd ..
else
	echo ""
	echo "Directory did not pull down correct - cannot find lib folder."
	echo "Make sure GIT repository URL is correct and branch $branch exists"
	exit 0
fi
#################################################
##############Run import util####################
#################################################

if [ -z "$customer" ] ; then
	read -p "Enter customer: " customer
fi

if [ -z "$folder" ] ; then
	read -p "Enter platform module folder: " folder
fi

if [ ! -d customer/$customer ] ; then
	echo "Cannot find customer $customer folder"
	exit 0
fi
	
if [ ! -d customer/$customer/$folder ] ; then
	echo "Cannot find custom object $folder in customer folder $customer"
	exit 0
fi

##Before running jar, remove previous zip if there#
##Also, reset working dir to match git and clean ##
##customer folder##################################

zip=".zip"
zipFolder=$folder$zip
echo $zipFolder
if [ -f "$zipFolder" ] ; then
	rm -rf $zipFolder
fi

branchReset="stash/"$branch
echo $branchReset

cd customer
cd $customer

git reset --hard $branchReset
git clean -f -d $folder

cd ..
cd ..

java -jar pmBuilderUtil.jar $customer $folder

exit 0
###########################################################################